let rateCZK = 1;
let rateUSD = 1;

document.addEventListener("DOMContentLoaded", () => {
  loadKey();
  fetchExchangeRates();
});

function saveKey() {
  const key = document.getElementById("apiKeyInput").value;
  localStorage.setItem("bingxKey", key);
  alert("API klíč uložen");
}

function loadKey() {
  const key = localStorage.getItem("bingxKey");
  if (key) document.getElementById("apiKeyInput").value = key;
}

function updateCurrency() {
  fetchData();
}

function fetchExchangeRates() {
  fetch("https://api.cnb.cz/cnbapi/exrates/daily?date=latest&lang=cz")
    .then(res => res.json())
    .then(data => {
      const usd = data.rates.find(r => r.shortName === "USD");
      if (usd) {
        rateUSD = 1 / usd.rate;
        fetchData();
      }
    });
}

function fetchData() {
  const apiKey = localStorage.getItem("bingxKey");
  if (!apiKey) return alert("Nejprve zadej API klíč");

  fetch("https://open-api.bingx.com/openApi/swap/v2/user/incomeRecords", {
    method: "GET",
    headers: {
      "X-BX-APIKEY": apiKey
    }
  })
  .then(res => res.json())
  .then(data => {
    const currency = document.getElementById("currency").value;
    const rate = currency === "czk" ? 1 : rateUSD;

    const records = data.data || [];

    const today = new Date().toISOString().slice(0, 10);
    const daily = records
      .filter(r => r.time.startsWith(today))
      .reduce((sum, r) => sum + parseFloat(r.realizedPnl), 0);

    const monthly = records.reduce((sum, r) => sum + parseFloat(r.realizedPnl), 0);
    const yearly = monthly * 12;

    document.getElementById("daily").innerText = formatMoney(daily * rate, currency);
    document.getElementById("monthly").innerText = formatMoney(monthly * rate, currency);
    document.getElementById("yearly").innerText = formatMoney(yearly * rate, currency);
  })
  .catch(err => {
    console.error(err);
    alert("Chyba při načítání dat z BingX.");
  });
}

function formatMoney(value, currency) {
  const symbol = currency === "czk" ? "Kč" : "$";
  return `${value >= 0 ? '+' : '-'}${Math.abs(value).toFixed(2)} ${symbol}`;
}
